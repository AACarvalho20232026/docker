Docker -> Software de virtualizacao

Docker hub - Site principal

Permissoes em docker: sudo chmod 666 /var/run/docker.sock

docker ps : mostra os containers em execução
docker ps -a : mostra todos os containers
docker ps -q : mostra o ID do container
docker ps -aq : mostra todos os IDS de todos os containers
docker stop : para o container a ser executado

docker container rm $(docker ps -aq) : Elimina todos os containers "instalados"
docker container ls : mostra todos os containers
docker rmi [id da imagem] : Elimina a imagem selecionada

docker run -it [nome do container] : Cria um novo container no qual executa a máquina solicitada
docker start [nome do container] : Ativa um container que nao esta a ser executado
docker exec [nome do container] ls : dentro do container mostra as pastas
docker exec -it [nome do container] /bin/bash : Executa o terminal dentro do container

figlet : Função para escrever na tela o solicitado

docker run -it [nome do container:nome do container] : realiza o script dentro do docker file 
docker build : Constroi uma imagem a partir de um dockerfile 

Componentes do Docker : Imagens ; Containers ; volumes e Redes

Docker volume ls : lista os volumes 

Para eliminar todos o containers, imagens ou networks é necessário criar uma variável de sistema ou seja "$(... ... ...)" como por exemplo:

- docker rmi $(docker image ls -q) - elimina todas as imagens possíveis
- docker rm $(docker ps -aq) - elimina todos os containers
- docker network rm $(docker network ls -q) -  elimina todas as networks possiveis

mkdir dados ; docker run -it -v ./dados:[pasta dentro do container] [nome do container] /bin/bash: Para criar um volume

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Docker image -> E uma representação estática de um ambiente de software completo, incluindo sistema operacional, bibliotecas e aplicativos necessários para executar um processo. Essa representação é construída a partir de um conjunto de instruções em um Dockerfile e pode ser compartilhada e distribuída facilmente. Quando executada, uma imagem Docker torna se um contêiner isolado e portátil, permitindo a execução consistente de aplicativos em diferentes ambientes.


Docker File -> E um ficheiro de texto que contém uma lista de instruções que o Docker usa para criar uma imagem Docker. Essas instruções incluem coisas como qual imagem base usar, quais comandos executar para configurar o ambiente, quais ficheiros copiar para a imagem e como configurar o contêiner quando ele é iniciado. Em resumo, um Dockerfile é um conjunto de instruções para construir uma imagem Docker.


Container -> E uma instancia ( copia ) de uma imagem docker, que se torna em software devido a sua execucao, encapsula uma aplicacao e as suas dependências em um ambiente isolado, permitindo que a aplicacao seja executada de maneira consistente e portátil em diferentes sistemas operacionais e ambientes de computação.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

Execute a command in a running container

Aliases:
  docker container exec, docker exec

Options:
  -d, --detach               Detached mode: run command in the background
      --detach-keys string   Override the key sequence for detaching a container
  -e, --env list             Set environment variables
      --env-file list        Read in a file of environment variables
  -i, --interactive          Keep STDIN open even if not attached
      --privileged           Give extended privileges to the command
  -t, --tty                  Allocate a pseudo-TTY
  -u, --user string          Username or UID (format: "<name|uid>[:<group|gid>]")
  -w, --workdir string       Working directory inside the container
-----------------
dentro do docker n usa sudo
---------------------
show databases;   // mostrar databases
create database aacarvalho;   // criar
drp database    // deletar
use database   // utiliza a database
show database   // mostrar
create table    // tabela
columns    
alter  // alternar

show databases;                        -> Mostra as databases 
create database nome_da_basedados;     -> Cria uma base de dados 
use nome_da_basedados;                 -> Para utilizar uma base de dados 
drop database nome_da_basedados;       -> Elimina uma base de dados 
drop table nome_da_basedados;          -> Elimina uma table 
show tables;                           -> Mostra as tabelas dentro daquela database onde estamos
show columns from nome_da_table;       -> Mostra a estrutura de uma table

create table nome_da_tabela (         -> Cria uma tabela, e dentro dos parenteses fica a estrutura da mesma
    -> PessoaID int,
    -> ultimoNome varchar(255),
    -> primeiroNome varchar(255),
    -> morada varchar(255),
    -> cidade varchar(255)
    -> );         

create table teste as select ultimoNome, primeiroNome from pessoa;        -> Cria uma tabela chamada "teste" com selecionado "ultimoNome" e "primeiroNome" da tabela pessoa

alter table pessoa add (
    -> email varchar(255));

alter table pessoa drop column email;

alter table pessoa modify column dataNascimento year;


mysql -u root -p                       -> Para entrar no ambiente mysql

show databases;                        -> Mostra as databases 
create database nome_da_basedados;     -> Cria uma base de dados 
use nome_da_basedados;                 -> Para utilizar uma base de dados 
drop database nome_da_basedados;       -> Elimina uma base de dados 
drop table nome_da_basedados;          -> Elimina uma table 
show tables;                           -> Mostra as tabelas dentro daquela database onde estamos
show columns from nome_da_table;       -> Mostra a estrutura de uma table

create table nome_da_tabela (          -> Cria uma tabela, e dentro dos parenteses fica a estrutura da mesma
    -> PessoaID int,
    -> ultimoNome varchar(255),
    -> primeiroNome varchar(255),
    -> morada varchar(255),
    -> cidade varchar(255)
    -> );         

create table teste as select ultimoNome, primeiroNome from pessoa;        -> Cria uma tabela chamada "teste" com selecionado "ultimoNome" e "primeiroNome" da tabela pessoa

alter table pessoa add (                                                  -> Altera a tabela "pessoa" adicionando o campo email          
    -> email varchar(255));

alter table pessoa drop column email;                                     -> Altera a tabela "pessoa" eliminando a coluna email 

alter table pessoa add dataNascimento date;                               -> Altera a tabela "pessoa" adicionando dataNasicmento do tipo "date"

alter table pessoa modify column dataNascimento year;                     -> Altera a tabela "pessoa" modificando a coluna dataNascimento po tipo "year"
--------------------------
unique -----> chave primaria




create table orders (
     orderID int not null,
     orderNumber int not null,
     personID int,
     primary key (orderID),
     foreign key (personID) references pessoas(id));
----------------------------------------

Chave Primaria -> Chave / Valor , que usamos para referenciar a(s) linha(s) de dados.

Chave Estrangeira -> Chave / Valor , que usamos para referenciar a(s) linha(s) de dados de outra tabela.
-------------
alter table pessoas auto_increment=1000;
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> insert into pessoas (uNome, pNome, age)
    -> values ("Leite","Paulo",49);
Query OK, 1 row affected (0.00 sec)

mysql> select * from pessoas;
+----------+-------+-------+------+
| pessoaID | uNome | pNome | age  |
+----------+-------+-------+------+
|     1000 | Leite | Paulo |   49 |
+----------+-------+-------+------+
1 row in set (0.00 sec)
-----------------------
create view nome_da_view as select nome_da_column from nome_table where condition;           -> Cria basicamente um atalho
ex: create view maioresDeVinte as select ultimoNome from pessoas where age>20;

foreign key (column1) references nome_table (column2);
ex: foreign key (ID_professor) references alunos (ID_aluno);
// adiciona uma chave estrangeira a coluna ID_Professor que tem ligacao a coluna ID_aluno da table alunos

select count(distinct column) from table;
// Mostra a quantidade de entidades diferentes naquela coluna daquela tabela v
____________________________________________________________________________________

> -> direçao onde vai o backup
________________

mysqldump -u root -p ent2 > enta2_d.sql
                     (db)       
_________________________________________
mysql port -> 3306

-P -> PORT

sudo apt install mysql-client-core-8.0

raid -> RAID foi originalmente denominado de "Redundant Array of Inexpensive Drives". Com o tempo, numa tentativa de dissociar o conceito de "discos baratos", a indústria reviu o acrônimo para "Redundant Array of Independent Disks".

--------------------------------------------------
if [ -z "$1" ]; -> verifica se existe

_________________________________________
# a) colocar o ficheiro em executavel
# sudo chmod +x bashFileWork.sh
#   ./bashFileWork.sh <filename>
# B) Executar o Ficheiro
#   bash ./bashFileWork.sh <filename>


____________________________
#verifica se o nome do ficheiro foi atribuido
if [ -z "$1" ]; then   
    echo "Usage: $0 <filename>"
    exit 1
fi

#cria um fichheiro com o nome atribuido
touch "$1"
_______________________________
              ?existe?
backupBB.sh <inputFile> <outputFile>
            se existe->cria
_______________________________________
if [ -z "$1" ]; then   
    echo "Usage: $0 <filename>"
    exit 1
fi

if [ -z "$2" ]; then   
    echo "tens que dar o name do ficheiro para o output"
    exit 1
else   
    cp "$1" "$2"
fi

echo "Backup de $1 criado como $2"
______________________________________
docker exec -> executar dentro do container

